%Clear and initializeclc;clear all;close all;%Parameters Section = TunablekernalSize = 9;sigma = 2;paddingConst = (kernalSize / 2 ) - 0.5;%Load an Image and convert it into black and white originalImage = imread("./mountain.jpg");originalImageResized = imresize(originalImage,[350 350]);originalImageinBlackAndWhite = rgb2gray(originalImageResized);%create a image kernal with gaussian distribution with declared kernal size ##local variablesweight = 0;kernal = zeros(kernalSize,kernalSize);##create matrix filled with gaussian values and equate the total weightage of the kernalfor loop_i = 1:kernalSize    for loop_j = 1:kernalSize        distanceSquare = (loop_i - paddingConst + 1)^2 + (loop_j - paddingConst + 1)^2;        kernal(loop_i,loop_j) = (exp(-1 * distanceSquare / (2 * sigma * sigma))) / (2 * sigma * sigma * pi);        weight = weight + kernal(loop_i,loop_j);  
        endforendfor##normalize the kernal with its total weight
kernal = kernal/weight;display(kernalSize);display(sigma);display(kernal);%create the padding to ensure that there are pixels for the enitre kernal movement[rowsize,coloumnsize] = size(originalImageinBlackAndWhite);filteredImage = zeros(rowsize,coloumnsize);originalImageinBlackAndWhitePadding = padarray(originalImageinBlackAndWhite,[paddingConst paddingConst]);%convolute - multiply the kernal and update output adding all valuesfor loop_i = 1:rowsize     for loop_j = 1:coloumnsize          looptemp = originalImageinBlackAndWhitePadding(loop_i:loop_i+kernalSize-1 , loop_j:loop_j+kernalSize-1);          looptemp = double(looptemp);          loopConvolution = looptemp.*kernal;          filteredImage(loop_i,loop_j) = sum(loopConvolution(:));          endforendfor%normalize the results to fit in a 8-bit image filteredImage = uint8(filteredImage);%Display the resultsfigure('Name','Gaussian Blur Example','NumberTitle','off');set(gcf,'Position',[150, 800, 600, 400]);subplot(121),imshow(originalImageinBlackAndWhite),title("Monochrome of the Original Image"); subplot(122),imshow(filteredImage),title("Filtered Image");